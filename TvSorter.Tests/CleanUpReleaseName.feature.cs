// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TvSorter.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Cleanup release name to match scene rules")]
    public partial class CleanupReleaseNameToMatchSceneRulesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CleanUpReleaseName.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cleanup release name to match scene rules", "\r\nInput release names need to be aligned with scene rules", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set of example cleanups")]
        [NUnit.Framework.TestCaseAttribute("Show.S01E11.720p.HDTV.x264-GROUP", "Show.S01E11.720p.HDTV.x264-GROUP", "Show", "1", "11", "GROUP", "720p.HDTV.x264", null)]
        [NUnit.Framework.TestCaseAttribute("Show.S01E11.720p.HDTV.x264-GROUP-DOUBLE", "Show.S01E11.720p.HDTV.x264-GROUP", "Show", "1", "11", "GROUP", "720p.HDTV.x264", null)]
        [NUnit.Framework.TestCaseAttribute("Show.1x11.HDTV.x264-GROUP", "Show.S01E11.HDTV.x264-GROUP", "Show", "1", "11", "GROUP", "HDTV.x264", null)]
        [NUnit.Framework.TestCaseAttribute("Show.S01E11.HDTV.x264-GROUP", "Show.S01E11.HDTV.x264-GROUP", "Show", "1", "11", "GROUP", "HDTV.x264", null)]
        [NUnit.Framework.TestCaseAttribute("Show.S01E11.HDTV.XVID-GROUP", "Show.S01E11.HDTV.XviD-GROUP", "Show", "1", "11", "GROUP", "HDTV.XviD", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.2.720p.HDTV.x264-GROUP", "Show.S01E02.720p.HDTV.x264-GROUP", "Show", "1", "2", "GROUP", "720p.HDTV.x264", null)]
        [NUnit.Framework.TestCaseAttribute("Show S06E01 720p WEB-DL DD5.1 H.264", "Show.S06E01.720p.WEB-DL.DD5.1.H.264-NOGROUP", "Show", "6", "1", "NOGROUP", "720p.WEB-DL.DD5.1.H.264", null)]
        [NUnit.Framework.TestCaseAttribute("Show S06E01 720p WEB-DL DD5.1 H.264-GROUP", "Show.S06E01.720p.WEB-DL.DD5.1.H.264-GROUP", "Show", "6", "1", "GROUP", "720p.WEB-DL.DD5.1.H.264", null)]
        [NUnit.Framework.TestCaseAttribute("Constantine.S01E09.The.Saint.Of.Last.Resort.Part.2.1080p.WEB-DL.DD5.1.H.264-ECI", "Constantine.S01E09.1080p.WEB-DL.DD5.1.H.264-ECI", "Constantine", "1", "9", "ECI", "1080p.WEB-DL.DD5.1.H.264", null)]
        [NUnit.Framework.TestCaseAttribute("Melissa.&.Joey.S04E04.The.Day.After.1080p.WEB-DL.DD5.1.H.264-SA89", "Melissa.and.Joey.S04E04.1080p.WEB-DL.DD5.1.H.264-SA89", "Melissa and Joey", "4", "4", "SA89", "1080p.WEB-DL.DD5.1.H.264", null)]
        [NUnit.Framework.TestCaseAttribute("Dokter Tinus (2014) S03E12 720p HDTV NL Audio SAM TBS", "Dokter.Tinus.2014.S03E12.720p.HDTV.NL.AUDIO.SAM.TBS-NOGROUP", "Dokter Tinus 2014", "3", "12", "NOGROUP", "720p.HDTV.NL.AUDIO.SAM.TBS", null)]
        [NUnit.Framework.TestCaseAttribute("How To Get Away With Murder - S01E01 [BullCrap] [1080p] WEB-DL [Subtitles Include" +
            "d]", "How.To.Get.Away.With.Murder.S01E01.1080p.WEB-DL-NOGROUP", "How To Get Away With Murder", "1", "1", "NOGROUP", "1080p.WEB-DL", null)]
        [NUnit.Framework.TestCaseAttribute("moordvrouw.404.720p-DHn", "Moordvrouw.S04E04.720p-DHN", "Moordvrouw", "4", "4", "DHN", "720p", null)]
        [NUnit.Framework.TestCaseAttribute("The.Mentalist.S07E12x13.Brown.Shag.Carpet-White.Orchids.720p.WEB-DL.DD5.1.H.264-E" +
            "CI", "The.Mentalist.S07E12.720p.WEB-DL.DD5.1.H.264-ECI", "The Mentalist", "7", "12", "ECI", "720p.WEB-DL.DD5.1.H.264", null)]
        [NUnit.Framework.TestCaseAttribute("Marvels.Agents.of.S.H.I.E.L.D.S02E12.Who.You.Really.Are.1080p.WEB-DL.DD5.1.H.264-" +
            "BS", "Marvels.Agents.Of.S.H.I.E.L.D.S02E12.1080p.WEB-DL.DD5.1.H.264-BS", "Marvels Agents Of S H I E L D", "2", "12", "BS", "1080p.WEB-DL.DD5.1.H.264", null)]
        public virtual void SetOfExampleCleanups(string inputSceneName, string cleanSceneName, string showName, string season, string episode, string group, string quality, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set of example cleanups", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("an input of {0}", inputSceneName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("clean up the release name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("the new name should be {0}", cleanSceneName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
 testRunner.And(string.Format("the show name should be {0}", showName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And(string.Format("the season should be {0}", season), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And(string.Format("the episode should be {0}", episode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And(string.Format("the release group should be {0}", group), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And(string.Format("the quality should be {0}", quality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("the release should be parseable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set of show names to be formatted")]
        [NUnit.Framework.TestCaseAttribute("The.Bad.Show", "The Bad Show", null)]
        [NUnit.Framework.TestCaseAttribute("Show.with.multiple.names", "Show With Multiple Names", null)]
        [NUnit.Framework.TestCaseAttribute("Show.&.The.Showing", "Show and the Showing", null)]
        public virtual void SetOfShowNamesToBeFormatted(string inputReleaseName, string expectedShowName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set of show names to be formatted", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given(string.Format("an input of {0}.S01E01.720p.HDTV-GROUP", inputReleaseName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When("clean up the release name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then(string.Format("the show name should be {0}", expectedShowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty show name")]
        [NUnit.Framework.TestCaseAttribute("UNPARSEABLE", null)]
        [NUnit.Framework.TestCaseAttribute("Season 6 - Episode 5 - The Hurt Locker, Part 2", null)]
        public virtual void EmptyShowName(string showName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty show name", exampleTags);
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given(string.Format("an input of {0}", showName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.When("clean up the release name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("the release should be non parseable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Quality strings should be cleaned up")]
        [NUnit.Framework.TestCaseAttribute("Show.S01E01.HDTV.XVID-GROUP", "HDTV.XviD", null)]
        [NUnit.Framework.TestCaseAttribute("Show.S01E01.720p.HDTV.x264-GROUP", "720p.HDTV.x264", null)]
        [NUnit.Framework.TestCaseAttribute("Show.S01E01.DVDRIP-GROUP", "DVDRip", null)]
        [NUnit.Framework.TestCaseAttribute("Show.S01E01.BLURAY-GROUP", "BluRay", null)]
        public virtual void QualityStringsShouldBeCleanedUp(string inputSceneName, string quality, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Quality strings should be cleaned up", exampleTags);
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given(string.Format("an input of {0}", inputSceneName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("clean up the release name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then(string.Format("the quality should be {0}", quality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Quality strings should only start with allowed words")]
        [NUnit.Framework.TestCaseAttribute("", "", null)]
        [NUnit.Framework.TestCaseAttribute("convert", "CONVERT", null)]
        [NUnit.Framework.TestCaseAttribute("native", "NATIVE", null)]
        [NUnit.Framework.TestCaseAttribute("proper", "PROPER", null)]
        [NUnit.Framework.TestCaseAttribute("real", "REAL", null)]
        [NUnit.Framework.TestCaseAttribute("repack", "REPACK", null)]
        [NUnit.Framework.TestCaseAttribute("dirfix", "DIRFIX", null)]
        [NUnit.Framework.TestCaseAttribute("nfofix", "NFOFIX", null)]
        [NUnit.Framework.TestCaseAttribute("read.nfo", "READ.NFO", null)]
        [NUnit.Framework.TestCaseAttribute("internal", "INTERNAL", null)]
        [NUnit.Framework.TestCaseAttribute("subbed", "SUBBED", null)]
        [NUnit.Framework.TestCaseAttribute("dubbed", "DUBBED", null)]
        [NUnit.Framework.TestCaseAttribute("1080p", "1080p", null)]
        [NUnit.Framework.TestCaseAttribute("720p", "720p", null)]
        [NUnit.Framework.TestCaseAttribute("480p", "480p", null)]
        [NUnit.Framework.TestCaseAttribute("hdtv", "HDTV", null)]
        [NUnit.Framework.TestCaseAttribute("dsr", "DSR", null)]
        [NUnit.Framework.TestCaseAttribute("ws", "WS", null)]
        [NUnit.Framework.TestCaseAttribute("bdrip", "BDRIP", null)]
        [NUnit.Framework.TestCaseAttribute("bluray", "BluRay", null)]
        [NUnit.Framework.TestCaseAttribute("dvdrip", "DVDRip", null)]
        [NUnit.Framework.TestCaseAttribute("pdtv", "PDTV", null)]
        [NUnit.Framework.TestCaseAttribute("x264", "x264", null)]
        [NUnit.Framework.TestCaseAttribute("H.264", "H.264", null)]
        [NUnit.Framework.TestCaseAttribute("REAL.1080p.WEB-DL.DD5.1.H.264", "REAL.1080p.WEB-DL.DD5.1.H.264", null)]
        public virtual void QualityStringsShouldOnlyStartWithAllowedWords(string inputQuality, string quality, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Quality strings should only start with allowed words", exampleTags);
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given(string.Format("an input of Show.S01E01.{0}-GROUP", inputQuality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("clean up the release name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then(string.Format("the quality should be {0}", quality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Roman numerals should be converted to decimal")]
        [NUnit.Framework.TestCaseAttribute("Show.Part.I.720p.HDTV.x264-GROUP", "1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.II.720p.HDTV.x264-GROUP", "1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.III.720p.HDTV.x264-GROUP", "1", "3", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.IV.720p.HDTV.x264-GROUP", "1", "4", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.V.720p.HDTV.x264-GROUP", "1", "5", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.VI.720p.HDTV.x264-GROUP", "1", "6", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.VII.720p.HDTV.x264-GROUP", "1", "7", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.VIII.720p.HDTV.x264-GROUP", "1", "8", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.IX.720p.HDTV.x264-GROUP", "1", "9", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.X.720p.HDTV.x264-GROUP", "1", "10", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.XI.720p.HDTV.x264-GROUP", "1", "11", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.XII.720p.HDTV.x264-GROUP", "1", "12", null)]
        [NUnit.Framework.TestCaseAttribute("Show.Part.XIII.720p.HDTV.x264-GROUP", "1", "13", null)]
        public virtual void RomanNumeralsShouldBeConvertedToDecimal(string inputSceneName, string season, string episode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Roman numerals should be converted to decimal", exampleTags);
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
 testRunner.Given(string.Format("an input of {0}", inputSceneName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
 testRunner.When("clean up the release name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then(string.Format("the season should be {0}", season), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
 testRunner.And(string.Format("the episode should be {0}", episode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
