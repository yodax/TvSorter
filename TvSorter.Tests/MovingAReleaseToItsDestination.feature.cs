// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TvSorter.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MovingAReleaseToItsDestinationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MovingAReleaseToItsDestination.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Moving a release to its destination", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Moving a release to its destination")))
            {
                TvSorter.Tests.MovingAReleaseToItsDestinationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("a tv destination of c:\\tv\\{ShowName}\\{SeasonEpisode}\\{ReleaseName}.{Extension}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Just one file to be moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Moving a release to its destination")]
        public virtual void JustOneFileToBeMoved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Just one file to be moved", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 7
 testRunner.Given("a release in c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item",
                        "Type"});
            table1.AddRow(new string[] {
                        "c:\\tv",
                        "Directory"});
            table1.AddRow(new string[] {
                        "c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP\\Show.S01E01.720p.HDTV-NOGROUP.mkv",
                        "File"});
#line 8
 testRunner.And("a directory structure", ((string)(null)), table1, "And ");
#line 12
 testRunner.When("we request a move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item"});
            table2.AddRow(new string[] {
                        "c:\\tv\\Show\\S01E01\\Show.S01E01.720p.HDTV-NOGROUP.mkv"});
#line 13
 testRunner.Then("the directory structure should contain", ((string)(null)), table2, "Then ");
#line 16
 testRunner.And("the directory c:\\incoming should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A seperate nfo file with a different name should be renamed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Moving a release to its destination")]
        public virtual void ASeperateNfoFileWithADifferentNameShouldBeRenamed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A seperate nfo file with a different name should be renamed", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 19
 testRunner.Given("a release in c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item",
                        "Type"});
            table3.AddRow(new string[] {
                        "c:\\tv",
                        "Directory"});
            table3.AddRow(new string[] {
                        "c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP\\Show.S01E01.720p.HDTV-NOGROUP.mkv",
                        "File"});
            table3.AddRow(new string[] {
                        "c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP\\info.nfo",
                        "File"});
#line 20
 testRunner.And("a directory structure", ((string)(null)), table3, "And ");
#line 25
 testRunner.When("we request a move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item"});
            table4.AddRow(new string[] {
                        "c:\\tv\\Show\\S01E01\\Show.S01E01.720p.HDTV-NOGROUP.mkv"});
            table4.AddRow(new string[] {
                        "c:\\tv\\Show\\S01E01\\Show.S01E01.720p.HDTV-NOGROUP.nfo"});
#line 26
 testRunner.Then("the directory structure should contain", ((string)(null)), table4, "Then ");
#line 30
 testRunner.And("the directory c:\\incoming should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A mp4 file should be moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Moving a release to its destination")]
        public virtual void AMp4FileShouldBeMoved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A mp4 file should be moved", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 33
 testRunner.Given("a release in c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item",
                        "Type"});
            table5.AddRow(new string[] {
                        "c:\\tv",
                        "Directory"});
            table5.AddRow(new string[] {
                        "c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP\\Show.S01E01.720p.HDTV-NOGROUP.mp4",
                        "File"});
#line 34
 testRunner.And("a directory structure", ((string)(null)), table5, "And ");
#line 38
 testRunner.When("we request a move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item"});
            table6.AddRow(new string[] {
                        "c:\\tv\\Show\\S01E01\\Show.S01E01.720p.HDTV-NOGROUP.mp4"});
#line 39
 testRunner.Then("the directory structure should contain", ((string)(null)), table6, "Then ");
#line 42
 testRunner.And("the directory c:\\incoming should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A avi file should be moved")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Moving a release to its destination")]
        public virtual void AAviFileShouldBeMoved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A avi file should be moved", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 45
 testRunner.Given("a release in c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item",
                        "Type"});
            table7.AddRow(new string[] {
                        "c:\\tv",
                        "Directory"});
            table7.AddRow(new string[] {
                        "c:\\incoming\\Show.S01E01.720p.HDTV-NOGROUP\\Show.S01E01.720p.HDTV-NOGROUP.avi",
                        "File"});
#line 46
 testRunner.And("a directory structure", ((string)(null)), table7, "And ");
#line 50
 testRunner.When("we request a move", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Item"});
            table8.AddRow(new string[] {
                        "c:\\tv\\Show\\S01E01\\Show.S01E01.720p.HDTV-NOGROUP.avi"});
#line 51
 testRunner.Then("the directory structure should contain", ((string)(null)), table8, "Then ");
#line 54
 testRunner.And("the directory c:\\incoming should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
